name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - staging
  pull_request:
    branches:
      - main
      - develop

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # =============================================================================
  # LINT & TYPE CHECK
  # =============================================================================
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint
        continue-on-error: true

      - name: Run TypeScript check
        run: pnpm type-check

  # =============================================================================
  # TESTS
  # =============================================================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: holi_labs_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm --filter web prisma generate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/holi_labs_test

      - name: Run database migrations
        run: pnpm --filter web prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/holi_labs_test

      - name: Run tests
        run: pnpm test
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/holi_labs_test
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # =============================================================================
  # BUILD
  # =============================================================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [lint, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm --filter web prisma generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Build web app
        run: pnpm --filter web build
        env:
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            apps/web/.next
            apps/web/public
          retention-days: 7

  # =============================================================================
  # SECURITY SCAN
  # =============================================================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Audit npm dependencies
        run: |
          pnpm audit --audit-level=moderate || true

  # =============================================================================
  # DEPLOY TO STAGING
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.holilabs.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to DigitalOcean App Platform (Staging)
        uses: digitalocean/app_action@v1.1.5
        with:
          app_name: holi-labs-staging
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Run database migrations (Staging)
        run: |
          # Install doctl
          curl -sL https://github.com/digitalocean/doctl/releases/download/v1.98.1/doctl-1.98.1-linux-amd64.tar.gz | tar -xzv
          sudo mv doctl /usr/local/bin

          # Authenticate
          doctl auth init -t ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

          # Run migrations via app platform
          doctl apps create-deployment ${{ secrets.STAGING_APP_ID }} --wait

      - name: Notify deployment status
        if: always()
        run: |
          echo "Staging deployment completed with status: ${{ job.status }}"

  # =============================================================================
  # DEPLOY TO PRODUCTION
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://holilabs.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v6
        with:
          name: build-artifacts
          path: apps/web/

      - name: Deploy to DigitalOcean App Platform (Production)
        uses: digitalocean/app_action@v1.1.5
        with:
          app_name: holi-labs-production
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Run database migrations (Production)
        run: |
          # Install doctl
          curl -sL https://github.com/digitalocean/doctl/releases/download/v1.98.1/doctl-1.98.1-linux-amd64.tar.gz | tar -xzv
          sudo mv doctl /usr/local/bin

          # Authenticate
          doctl auth init -t ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

          # Run migrations
          doctl apps create-deployment ${{ secrets.PRODUCTION_APP_ID }} --wait

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        if: always()
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          version: ${{ github.sha }}

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Production deployment successful!"
          echo "Version: ${{ github.sha }}"
          echo "URL: https://holilabs.com"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          echo "Check logs for details"
