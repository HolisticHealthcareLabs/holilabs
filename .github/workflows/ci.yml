name: CI - Build & Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: cd apps/web && pnpm tsc --noEmit

      - name: Lint
        run: cd apps/web && pnpm lint
        continue-on-error: true

      - name: Check CSS syntax
        run: |
          echo "Checking for common CSS errors..."
          ! grep -r "justify-center\|align-content-center" apps/web/src/styles/*.css || (echo "Invalid CSS properties found!" && exit 1)
          echo "CSS syntax check passed!"

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: lint-and-typecheck

    env:
      DATABASE_URL: "postgresql://test:test@localhost:5432/test_db"
      NEXTAUTH_SECRET: "test-secret-for-ci-builds-only"
      SESSION_SECRET: "test-session-secret-for-ci-builds"
      NEXT_PUBLIC_SUPABASE_URL: "https://test.supabase.co"
      NEXT_PUBLIC_SUPABASE_ANON_KEY: "test-key"
      NODE_ENV: "production"

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: cd apps/web && pnpm prisma generate

      - name: Build application
        run: cd apps/web && pnpm build
        timeout-minutes: 10

      - name: Check build output
        run: |
          if [ -d "apps/web/.next" ]; then
            echo "✅ Build successful! .next directory exists"
            ls -la apps/web/.next
          else
            echo "❌ Build failed! .next directory not found"
            exit 1
          fi

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: next-build
          path: apps/web/.next
          retention-days: 1
