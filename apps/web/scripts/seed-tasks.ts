/**
 * Seed Sample Tasks for Testing
 * Run with: npx tsx scripts/seed-tasks.ts
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

const sampleTasks = [
  {
    title: 'Review lab results for Patient Rodriguez',
    description: 'Complete blood count and metabolic panel results are ready for review. Check for any abnormalities.',
    category: 'LAB_RESULT',
    priority: 'URGENT',
    assignedTo: 'system',
    dueDate: new Date(Date.now() + 2 * 60 * 60 * 1000), // Due in 2 hours
    autoGenerated: true,
    generatedBy: 'lab_system',
  },
  {
    title: 'Call Mrs. Chen about test results',
    description: 'Patient called requesting update on recent cardiovascular tests. All results normal.',
    category: 'CALLBACK',
    priority: 'HIGH',
    assignedTo: 'system',
    dueDate: new Date(Date.now() + 4 * 60 * 60 * 1000), // Due in 4 hours
    autoGenerated: false,
  },
  {
    title: 'Sign prescription for John Smith',
    description: 'E-prescription for Lisinopril 10mg ready for signature and electronic submission.',
    category: 'PRESCRIPTION',
    priority: 'HIGH',
    assignedTo: 'system',
    dueDate: new Date(Date.now() + 6 * 60 * 60 * 1000), // Due in 6 hours
    autoGenerated: true,
    generatedBy: 'pharmacy_system',
  },
  {
    title: 'Schedule follow-up for diabetes patient',
    description: 'Patient Maria Garcia needs 3-month diabetes management follow-up. Recent HbA1c: 7.2%',
    category: 'FOLLOW_UP',
    priority: 'NORMAL',
    assignedTo: 'system',
    dueDate: new Date(Date.now() + 24 * 60 * 60 * 1000), // Due tomorrow
    autoGenerated: true,
    generatedBy: 'care_coordination',
  },
  {
    title: 'Complete SOAP note for morning appointment',
    description: 'Document consultation notes for David Lee - Annual physical examination',
    category: 'DOCUMENTATION',
    priority: 'NORMAL',
    assignedTo: 'system',
    dueDate: new Date(Date.now() + 8 * 60 * 60 * 1000), // Due in 8 hours
    autoGenerated: false,
  },
  {
    title: 'Review abnormal chest X-ray - URGENT',
    description: 'Radiologist noted possible infiltrate in right lower lobe. Patient: Sarah Johnson. Immediate review required.',
    category: 'REVIEW',
    priority: 'URGENT',
    assignedTo: 'system',
    dueDate: new Date(Date.now() - 1 * 60 * 60 * 1000), // Overdue by 1 hour!
    autoGenerated: true,
    generatedBy: 'radiology_system',
  },
  {
    title: 'Appointment reminder: Review pre-op clearance',
    description: 'Patient Michael Brown scheduled for surgery next week. Review pre-op labs and cardiac clearance.',
    category: 'APPOINTMENT',
    priority: 'HIGH',
    assignedTo: 'system',
    dueDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // Due in 2 days
    autoGenerated: false,
  },
  {
    title: 'Update medication list for elderly patient',
    description: 'Reconcile medications for Emma Wilson after recent hospitalization. Check for drug interactions.',
    category: 'PRESCRIPTION',
    priority: 'NORMAL',
    assignedTo: 'system',
    dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // Due in 3 days
    autoGenerated: true,
    generatedBy: 'care_coordination',
  },
  {
    title: 'Call pharmacy regarding prior authorization',
    description: 'Insurance denied Eliquis for patient Thompson. Need to submit prior auth or find alternative.',
    category: 'GENERAL',
    priority: 'HIGH',
    assignedTo: 'system',
    dueDate: new Date(Date.now() + 5 * 60 * 60 * 1000), // Due in 5 hours
    autoGenerated: false,
  },
  {
    title: 'Review pediatric vaccination schedule',
    description: 'Patient Emily Garcia (6 months) due for routine vaccinations. Verify schedule and prepare consent forms.',
    category: 'APPOINTMENT',
    priority: 'LOW',
    assignedTo: 'system',
    dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // Due in 1 week
    autoGenerated: true,
    generatedBy: 'pediatric_tracker',
  },
  {
    title: 'Critical: Review ER admission notes',
    description: 'Your patient Robert Martinez admitted to ER last night with chest pain. Review admission notes and care plan.',
    category: 'REVIEW',
    priority: 'URGENT',
    assignedTo: 'system',
    dueDate: new Date(Date.now() - 30 * 60 * 1000), // Overdue by 30 minutes!
    autoGenerated: true,
    generatedBy: 'hospital_system',
  },
  {
    title: 'Document telemedicine consultation',
    description: 'Complete clinical note for video consultation with patient Anderson regarding hypertension management.',
    category: 'DOCUMENTATION',
    priority: 'NORMAL',
    assignedTo: 'system',
    dueDate: null, // No due date
    autoGenerated: false,
  },
];

async function seedTasks() {
  console.log('üå± Seeding sample tasks...');

  try {
    // Create or find demo user
    let demoUser = await prisma.user.findUnique({
      where: { email: 'demo@holilabs.com' },
    });

    if (!demoUser) {
      console.log('Creating demo user...');
      demoUser = await prisma.user.create({
        data: {
          email: 'demo@holilabs.com',
          firstName: 'Demo',
          lastName: 'Physician',
          role: 'CLINICIAN',
        },
      });
      console.log(`‚úì Created demo user: ${demoUser.email}`);
    } else {
      console.log(`‚úì Using existing demo user: ${demoUser.email}`);
    }

    // Update sample tasks to use demo user ID
    sampleTasks.forEach(task => {
      task.assignedTo = demoUser!.id;
    });

    // Clear existing tasks for demo user (for testing)
    const deleted = await prisma.providerTask.deleteMany({
      where: { assignedTo: demoUser.id },
    });
    console.log(`‚úì Cleared ${deleted.count} existing tasks`);

    // Create sample tasks
    let created = 0;
    for (const task of sampleTasks) {
      await prisma.providerTask.create({ data: task });
      created++;
      console.log(`‚úì Created: ${task.title}`);
    }

    console.log(`\n‚úÖ Successfully seeded ${created} tasks!`);
    console.log('\nTask Summary:');
    console.log(`- URGENT: ${sampleTasks.filter(t => t.priority === 'URGENT').length}`);
    console.log(`- HIGH: ${sampleTasks.filter(t => t.priority === 'HIGH').length}`);
    console.log(`- NORMAL: ${sampleTasks.filter(t => t.priority === 'NORMAL').length}`);
    console.log(`- LOW: ${sampleTasks.filter(t => t.priority === 'LOW').length}`);
    console.log(`- Overdue: ${sampleTasks.filter(t => t.dueDate && t.dueDate < new Date()).length}`);
    console.log(`- Auto-generated: ${sampleTasks.filter(t => t.autoGenerated).length}`);

    console.log(`\nüéâ You can now test the task management system!`);
    console.log(`\nDemo User ID: ${demoUser.id}`);
    console.log(`Demo User Email: ${demoUser.email}`);
    console.log(`\nTo view tasks, visit:`);
    console.log(`http://129.212.184.190:3000/dashboard/tasks?userId=${demoUser.id}`);
  } catch (error) {
    console.error('‚ùå Error seeding tasks:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

seedTasks();
