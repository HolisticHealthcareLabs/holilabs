'use client';

import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

interface Task {
  id: string;
  title: string;
  description: string | null;
  category: 'APPOINTMENT' | 'LAB_RESULT' | 'FOLLOW_UP' | 'PRESCRIPTION' | 'DOCUMENTATION' | 'REVIEW' | 'CALLBACK' | 'GENERAL';
  priority: 'URGENT' | 'HIGH' | 'NORMAL' | 'LOW';
  status: 'PENDING' | 'IN_PROGRESS' | 'COMPLETED' | 'DISMISSED';
  dueDate: string | null;
  assignedTo: string;
  createdAt: string;
  completedAt: string | null;
  dismissedAt: string | null;
  relatedType: string | null;
  relatedId: string | null;
  autoGenerated: boolean;
}

interface TaskCounts {
  today: number;
  overdue: number;
  all: number;
}

type ViewType = 'today' | 'week' | 'overdue' | 'all';

interface TaskManagementPanelProps {
  userId?: string;
  compact?: boolean;
}

export default function TaskManagementPanel({ userId = 'system', compact = false }: TaskManagementPanelProps) {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [counts, setCounts] = useState<TaskCounts>({ today: 0, overdue: 0, all: 0 });
  const [loading, setLoading] = useState(true);
  const [view, setView] = useState<ViewType>('today');
  const [categoryFilter, setCategoryFilter] = useState<string>('all');
  const [priorityFilter, setPriorityFilter] = useState<string>('all');
  const [actionLoading, setActionLoading] = useState<string | null>(null);
  const [expandedId, setExpandedId] = useState<string | null>(null);

  useEffect(() => {
    fetchTasks();
  }, [view, categoryFilter, priorityFilter]);

  const fetchTasks = async () => {
    try {
      setLoading(true);
      const params = new URLSearchParams({
        userId,
        view,
        status: 'PENDING,IN_PROGRESS',
        ...(categoryFilter !== 'all' && { category: categoryFilter }),
        ...(priorityFilter !== 'all' && { priority: priorityFilter }),
      });
      const response = await fetch(`/api/tasks?${params.toString()}`);
      const data = await response.json();
      if (data.success) {
        setTasks(data.data);
        setCounts(data.counts);
      }
    } catch (error) {
      console.error('Failed to fetch tasks:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleAction = async (taskId: string, action: 'complete' | 'dismiss' | 'start') => {
    try {
      setActionLoading(taskId);
      const response = await fetch(`/api/tasks/${taskId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action }),
      });
      const data = await response.json();
      if (data.success) {
        await fetchTasks();
      }
    } catch (error) {
      console.error(`Failed to ${action} task:`, error);
    } finally {
      setActionLoading(null);
    }
  };

  const getPriorityColor = (priority: string) => {
    const colors = {
      URGENT: { bg: 'bg-red-50', text: 'text-red-700', border: 'border-red-300', icon: 'üî¥' },
      HIGH: { bg: 'bg-orange-50', text: 'text-orange-700', border: 'border-orange-300', icon: 'üü†' },
      NORMAL: { bg: 'bg-blue-50', text: 'text-blue-700', border: 'border-blue-300', icon: 'üîµ' },
      LOW: { bg: 'bg-gray-50', text: 'text-gray-700', border: 'border-gray-300', icon: '‚ö™' },
    };
    return colors[priority as keyof typeof colors] || colors.NORMAL;
  };

  const getCategoryIcon = (category: string) => {
    const icons: Record<string, string> = {
      APPOINTMENT: 'üìÖ',
      LAB_RESULT: 'üî¨',
      FOLLOW_UP: 'üìû',
      PRESCRIPTION: 'üíä',
      DOCUMENTATION: 'üìù',
      REVIEW: 'üëÅÔ∏è',
      CALLBACK: 'üì≤',
      GENERAL: 'üìã',
    };
    return icons[category] || 'üìã';
  };

  const formatTimeUntil = (dueDate: string | null) => {
    if (!dueDate) return null;
    const now = new Date();
    const due = new Date(dueDate);
    const diff = due.getTime() - now.getTime();
    const isOverdue = diff < 0;
    const absDiff = Math.abs(diff);

    const hours = Math.floor(absDiff / (1000 * 60 * 60));
    const days = Math.floor(hours / 24);

    if (days > 0) {
      return { text: `${days}d`, isOverdue };
    } else if (hours > 0) {
      return { text: `${hours}h`, isOverdue };
    } else {
      const minutes = Math.floor(absDiff / (1000 * 60));
      return { text: `${minutes}m`, isOverdue };
    }
  };

  const formatDate = (date: string | null) => {
    if (!date) return 'No due date';
    return new Date(date).toLocaleString('en-US', {
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  if (loading) {
    return (
      <div className="space-y-4">
        {[...Array(compact ? 2 : 4)].map((_, i) => (
          <div key={i} className="bg-gray-100 h-24 rounded-lg animate-pulse" />
        ))}
      </div>
    );
  }

  if (tasks.length === 0) {
    return (
      <div className="text-center py-16">
        <div className="text-6xl mb-4">‚ú®</div>
        <h3 className="text-xl font-semibold text-gray-900 mb-2">
          {view === 'overdue' ? 'No overdue tasks!' : 'All caught up!'}
        </h3>
        <p className="text-gray-600">
          {view === 'overdue'
            ? 'Great job staying on top of your work'
            : 'You have no pending tasks at the moment'}
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* View Tabs */}
      {!compact && (
        <div className="flex items-center space-x-2 border-b border-gray-200 pb-4">
          {[
            { key: 'today', label: 'Today', count: counts.today },
            { key: 'week', label: 'This Week', count: counts.all },
            { key: 'overdue', label: 'Overdue', count: counts.overdue },
            { key: 'all', label: 'All', count: counts.all },
          ].map(({ key, label, count }) => (
            <button
              key={key}
              onClick={() => setView(key as ViewType)}
              className={`relative px-4 py-2 rounded-lg font-medium transition-all ${
                view === key
                  ? 'bg-blue-500 text-white shadow-lg'
                  : 'bg-white text-gray-700 hover:bg-gray-100'
              }`}
            >
              {label}
              {count > 0 && (
                <span className={`ml-2 px-2 py-0.5 rounded-full text-xs font-bold ${
                  view === key ? 'bg-white text-blue-500' : 'bg-gray-200 text-gray-700'
                }`}>
                  {count}
                </span>
              )}
            </button>
          ))}
        </div>
      )}

      {/* Filters */}
      {!compact && (
        <div className="flex items-center space-x-4">
          <select
            value={categoryFilter}
            onChange={(e) => setCategoryFilter(e.target.value)}
            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="all">All Categories</option>
            <option value="APPOINTMENT">üìÖ Appointments</option>
            <option value="LAB_RESULT">üî¨ Lab Results</option>
            <option value="FOLLOW_UP">üìû Follow-ups</option>
            <option value="PRESCRIPTION">üíä Prescriptions</option>
            <option value="DOCUMENTATION">üìù Documentation</option>
            <option value="REVIEW">üëÅÔ∏è Reviews</option>
            <option value="CALLBACK">üì≤ Callbacks</option>
            <option value="GENERAL">üìã General</option>
          </select>

          <select
            value={priorityFilter}
            onChange={(e) => setPriorityFilter(e.target.value)}
            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="all">All Priorities</option>
            <option value="URGENT">üî¥ Urgent</option>
            <option value="HIGH">üü† High</option>
            <option value="NORMAL">üîµ Normal</option>
            <option value="LOW">‚ö™ Low</option>
          </select>
        </div>
      )}

      {/* Tasks List */}
      <div className="space-y-4">
        <AnimatePresence>
          {tasks.slice(0, compact ? 5 : undefined).map((task, index) => {
            const priorityColor = getPriorityColor(task.priority);
            const timeUntil = formatTimeUntil(task.dueDate);

            return (
              <motion.div
                key={task.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, x: -100 }}
                transition={{ delay: index * 0.05 }}
                className={`bg-white border-2 rounded-lg p-4 hover:shadow-lg transition-all ${
                  task.priority === 'URGENT'
                    ? 'border-red-300 shadow-md'
                    : priorityColor.border
                }`}
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    {/* Header */}
                    <div className="flex items-center space-x-3 mb-2">
                      <span className="text-2xl">{getCategoryIcon(task.category)}</span>
                      <div className="flex-1">
                        <h3 className="text-lg font-semibold text-gray-900">{task.title}</h3>
                        <div className="flex items-center space-x-2 mt-1">
                          <span className={`px-2 py-1 rounded-full text-xs font-medium border ${priorityColor.bg} ${priorityColor.text} ${priorityColor.border}`}>
                            {priorityColor.icon} {task.priority}
                          </span>
                          <span className="text-xs text-gray-500">{task.category.replace('_', ' ')}</span>
                          {task.status === 'IN_PROGRESS' && (
                            <span className="px-2 py-1 rounded-full text-xs font-medium bg-blue-50 text-blue-700 border border-blue-200">
                              ‚è≥ In Progress
                            </span>
                          )}
                        </div>
                      </div>
                    </div>

                    {/* Due Date */}
                    {task.dueDate && (
                      <div className="flex items-center space-x-2 text-sm mb-2">
                        <span className="text-gray-500">Due:</span>
                        <span className={`font-medium ${timeUntil?.isOverdue ? 'text-red-600' : 'text-gray-900'}`}>
                          {formatDate(task.dueDate)}
                        </span>
                        {timeUntil && (
                          <span className={`px-2 py-0.5 rounded-full text-xs font-bold ${
                            timeUntil.isOverdue
                              ? 'bg-red-100 text-red-700'
                              : 'bg-green-100 text-green-700'
                          }`}>
                            {timeUntil.isOverdue ? '‚ö†Ô∏è Overdue' : '‚è∞'} {timeUntil.text}
                          </span>
                        )}
                      </div>
                    )}

                    {/* Description Toggle */}
                    {task.description && (
                      expandedId === task.id ? (
                        <div className="mt-3 p-3 bg-gray-50 rounded-lg border border-gray-200">
                          <div className="flex items-center justify-between mb-2">
                            <p className="text-sm font-medium text-gray-700">Description:</p>
                            <button
                              onClick={() => setExpandedId(null)}
                              className="text-sm text-blue-600 hover:text-blue-700"
                            >
                              Hide
                            </button>
                          </div>
                          <p className="text-sm text-gray-600 whitespace-pre-wrap">{task.description}</p>
                        </div>
                      ) : (
                        <button
                          onClick={() => setExpandedId(task.id)}
                          className="text-sm text-blue-600 hover:text-blue-700 font-medium"
                        >
                          View details ‚Üí
                        </button>
                      )
                    )}
                  </div>

                  {/* Quick Actions */}
                  <div className="flex flex-col space-y-2 ml-4">
                    {task.status === 'PENDING' && (
                      <button
                        onClick={() => handleAction(task.id, 'start')}
                        disabled={actionLoading === task.id}
                        className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50 text-sm font-medium whitespace-nowrap"
                      >
                        ‚ñ∂Ô∏è Start
                      </button>
                    )}
                    <button
                      onClick={() => handleAction(task.id, 'complete')}
                      disabled={actionLoading === task.id}
                      className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 disabled:opacity-50 text-sm font-medium whitespace-nowrap"
                    >
                      ‚úì Complete
                    </button>
                    <button
                      onClick={() => handleAction(task.id, 'dismiss')}
                      disabled={actionLoading === task.id}
                      className="px-4 py-2 bg-gray-400 text-white rounded-lg hover:bg-gray-500 disabled:opacity-50 text-sm font-medium whitespace-nowrap"
                    >
                      ‚úï Dismiss
                    </button>
                  </div>
                </div>

                {/* Auto-generated badge */}
                {task.autoGenerated && (
                  <div className="mt-3 pt-3 border-t border-gray-200">
                    <span className="text-xs text-gray-500 italic">ü§ñ Auto-generated task</span>
                  </div>
                )}
              </motion.div>
            );
          })}
        </AnimatePresence>
      </div>

      {/* Show More for Compact Mode */}
      {compact && tasks.length > 5 && (
        <div className="text-center">
          <a
            href="/dashboard/tasks"
            className="inline-block px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 font-medium"
          >
            View All {tasks.length} Tasks ‚Üí
          </a>
        </div>
      )}
    </div>
  );
}
